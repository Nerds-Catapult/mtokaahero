generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  phone      String?  @unique
  password   String
  firstName  String
  lastName   String
  avatar     String?
  role       UserRole @default(CUSTOMER)
  isVerified Boolean  @default(false)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  profile          UserProfile?
  business         Business?
  customer         Customer?
  accounts         Account[]
  sessions         Session[]
  notifications    Notification[]
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")

  @@map("users")
}

model UserProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  bio         String?
  addressId   String?
  preferences Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  address Address? @relation("UserProfileAddress", fields: [addressId], references: [id])

  @@map("user_profiles")
}

model Business {
  id              String       @id @default(cuid())
  ownerId         String       @unique
  businessType    BusinessType
  businessName    String
  description     String?
  logo            String?
  coverImage      String?
  licenseNumber   String?
  taxId           String?
  isVerified      Boolean      @default(false)
  isActive        Boolean      @default(true)
  rating          Float        @default(0)
  totalReviews    Int          @default(0)
  yearsInBusiness Int?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  owner           User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  addresses       BusinessAddress[]
  services        Service[]
  products        Product[]
  bookings        Booking[]
  reviews         Review[]
  businessHours   BusinessHours[]
  specializations Specialization[]
  certifications  Certification[]
  analytics       BusinessAnalytics?
  orders          Order[]

  @@map("businesses")
}

model BusinessAddress {
  id         String  @id @default(cuid())
  businessId String
  addressId  String
  isPrimary  Boolean @default(false)

  // Relationships
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  address  Address  @relation("BusinessAddressLocation", fields: [addressId], references: [id])

  @@map("business_addresses")
}

model BusinessHours {
  id         String  @id @default(cuid())
  businessId String
  dayOfWeek  Int // 0 = Sunday, 1 = Monday, etc.
  openTime   String // Format: "09:00"
  closeTime  String // Format: "18:00"
  isClosed   Boolean @default(false)

  // Relationships
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, dayOfWeek])
  @@map("business_hours")
}

// Services Management
model Service {
  id           String        @id @default(cuid())
  businessId   String
  title        String
  description  String
  price        Float
  duration     Int? // in minutes
  images       String[]
  status       ServiceStatus @default(AVAILABLE)
  category     String
  subcategory  String?
  tags         String[]
  requirements String? // Special requirements for the service
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relationships
  business  Business   @relation(fields: [businessId], references: [id], onDelete: Cascade)
  bookings  Booking[]
  reviews   Review[]
  favorites Favorite[]

  @@map("services")
}

model Product {
  id             String        @id @default(cuid())
  businessId     String
  name           String
  description    String
  price          Float
  compareAtPrice Float? 
  sku            String        @unique
  barcode        String?
  images         String[]
  status         ProductStatus @default(AVAILABLE)
  category       String
  subcategory    String?
  brand          String?
  model          String?
  year           Int?
  partNumber     String?
  compatibility  String[] // Compatible car models/years
  stock          Int           @default(0)
  minStock       Int           @default(0)
  weight         Float?
  dimensions     Json? // {length, width, height}
  warranty       String? // Warranty information
  tags           String[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relationships
  business   Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  reviews    Review[]
  favorites  Favorite[]

  @@map("products")
}

// Booking System
model Booking {
  id            String        @id @default(cuid())
  customerId    String
  businessId    String
  serviceId     String
  scheduledDate DateTime
  scheduledTime String // Format: "14:30"
  status        BookingStatus @default(PENDING)
  notes         String?
  totalAmount   Float
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  payment  Payment?
  review   Review?

  @@map("bookings")
}

model Order {
  id                String        @id @default(cuid())
  customerId        String
  businessId        String
  orderNumber       String        @unique
  status            OrderStatus   @default(PENDING)
  subtotal          Float
  tax               Float         @default(0)
  shipping          Float         @default(0)
  total             Float
  shippingAddressId String
  billingAddressId  String?
  paymentStatus     PaymentStatus @default(PENDING)
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relationships
  customer        Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  business        Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  shippingAddress Address        @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address?       @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]
  payment         Payment?
  tracking        OrderTracking?

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  total     Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model OrderTracking {
  id             String    @id @default(cuid())
  orderId        String    @unique
  trackingNumber String?
  carrier        String?
  shippedAt      DateTime?
  deliveredAt    DateTime?
  status         String
  updates        Json[] // Array of tracking updates

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_tracking")
}

// Payment System
model Payment {
  id            String        @id @default(cuid())
  bookingId     String?       @unique
  orderId       String?       @unique
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod String
  transactionId String?
  processedAt   DateTime?
  createdAt     DateTime      @default(now())

  // Relationships
  booking Booking? @relation(fields: [bookingId], references: [id])
  order   Order?   @relation(fields: [orderId], references: [id])

  @@map("payments")
}

// Review System
model Review {
  id         String   @id @default(cuid())
  customerId String
  businessId String?
  serviceId  String?
  productId  String?
  bookingId  String?  @unique
  rating     Int // 1-5 stars
  title      String?
  comment    String?
  images     String[]
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  customer Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  business Business? @relation(fields: [businessId], references: [id])
  service  Service?  @relation(fields: [serviceId], references: [id])
  product  Product?  @relation(fields: [productId], references: [id])
  booking  Booking?  @relation(fields: [bookingId], references: [id])

  @@map("reviews")
}

model Specialization {
  id          String  @id @default(cuid())
  businessId  String
  name        String
  description String?

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, name])
  @@map("specializations")
}

model Certification {
  id             String    @id @default(cuid())
  businessId     String
  name           String
  issuedBy       String
  issuedDate     DateTime
  expiresDate    DateTime?
  certificateUrl String?

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

model Customer {
  id        String     @id @default(cuid())
  userId    String     @unique
  vehicles  Vehicle[]
  bookings  Booking[]
  orders    Order[]
  reviews   Review[]
  favorites Favorite[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customers")
}

model Vehicle {
  id           String   @id @default(cuid())
  customerId   String
  make         String
  model        String
  year         Int
  vin          String?  @unique
  licensePlate String?
  color        String?
  mileage      Int?
  fuelType     String?
  transmission String?
  engineSize   String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("vehicles")
}

// Analytics and Metrics
model BusinessAnalytics {
  id             String   @id @default(cuid())
  businessId     String   @unique
  totalRevenue   Float    @default(0)
  totalBookings  Int      @default(0)
  totalCustomers Int      @default(0)
  avgRating      Float    @default(0)
  completionRate Float    @default(0)
  responseTime   Float    @default(0) 
  lastCalculated DateTime @default(now())

  // Relationships
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("business_analytics")
}

model Favorite {
  id         String   @id @default(cuid())
  customerId String
  serviceId  String?
  productId  String?
  createdAt  DateTime @default(now())

  // Relationships
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  service  Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  product  Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([customerId, serviceId])
  @@unique([customerId, productId])
  @@map("favorites")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  subject    String?
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relationships
  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@map("messages")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  data      Json? // Additional data for the notification
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  zipCode   String
  country   String   @default("US")
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userProfiles         UserProfile[]     @relation("UserProfileAddress")
  businessAddresses    BusinessAddress[] @relation("BusinessAddressLocation")
  orderShippingAddress Order[]           @relation("OrderShippingAddress")
  orderBillingAddress  Order[]           @relation("OrderBillingAddress")

  @@map("addresses")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}



enum UserRole {
  CUSTOMER
  FREELANCE_MECHANIC
  GARAGE_OWNER
  SPAREPARTS_SHOP
  ADMIN
}

enum BusinessType {
  FREELANCE_MECHANIC
  GARAGE
  SPAREPARTS_SHOP
}

enum ServiceStatus {
  AVAILABLE
  UNAVAILABLE
  SUSPENDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ProductStatus {
  AVAILABLE
  OUT_OF_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}
